class MyLinkedList {
    struct Node{
        int val;
        Node* next;
        Node(int data){
            val = data;
            next = NULL;
        }
    };

    Node* head;
    int size;

public:
    MyLinkedList() {
        head =  NULL;
        size = 0;
    }
    
    int get(int index) {
        if(index<0 || index>=size)
            return -1;

        Node* temp = head;
        for(int i=0; i<index; i++)
            temp = temp->next;

        return temp->val;
    }
    
    void addAtHead(int val) {
        Node* nodeToAdd = new Node(val);
        nodeToAdd->next = head;
        head = nodeToAdd;
        size++;
    }
    
    void addAtTail(int val) {
        Node* nodeToAdd = new Node(val);
        Node* temp = head;

        if(temp == NULL){
            head = nodeToAdd;
            size++;
            return;
        }

        while( temp->next != NULL)
            temp = temp->next;

       if(temp != NULL)
            temp->next = nodeToAdd; 
        size++;   
    }
    
    void addAtIndex(int index, int val) {
        if(index<0 || index>size)
            return;

        if(index == 0){
            addAtHead(val);
            return;
        }

        Node* nodeToAdd = new Node(val);
        Node* temp = head;
        for(int i=0; i<(index-1); i++)
            temp = temp->next;

        Node* temp1 = temp->next;
        temp->next = nodeToAdd;
        nodeToAdd->next = temp1;

        size++;
    }
    
    void deleteAtIndex(int index) {
        if(index<0 || index>=size)
            return;
        
        if(index == 0){
            Node* temp = head;
         
             head=temp->next;
            
             size--;
        delete(temp);
        return;
        }

        Node* temp = head;
         Node* prev;;
        for(int i=0; i<(index); i++)
        {prev=temp;
            temp = temp->next;
        }
prev->next=temp->next;
        
        delete(temp);

        size--;
    }
};


Input
["MyLinkedList", "addAtHead", "addAtTail", "addAtIndex", "get", "deleteAtIndex", "get"]
[[], [1], [3], [1, 2], [1], [1], [1]]
Output
[null, null, null, null, 2, null, 3]

Explanation
MyLinkedList myLinkedList = new MyLinkedList();
myLinkedList.addAtHead(1);
myLinkedList.addAtTail(3);
myLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3
myLinkedList.get(1);              // return 2
myLinkedList.deleteAtIndex(1);    // now the linked list is 1->3
myLinkedList.get(1);              // return 3
