/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
int size(ListNode*head){
        int n=0;
        
            while(head!=NULL)
            {n++;
             head=head->next;
            }
           return n;

        }
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL)
        return NULL;
        
     int n=size(head);
     k=k%n;//taaki extra rotation na karna pade
     if(k==0)
        return head;
    
     ListNode*fast=head;
     ListNode*slow=head;
    for(int i=0;i<k;i++)
    {
        fast=fast->next;
    }
    while(fast!=NULL&&fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next;
    }
    ListNode*a=slow->next;
    ListNode*b=a;
    slow->next=NULL;
    while(a->next!=NULL)
    {
a=a->next;
    }
if(a->next==NULL)
{
a->next=head;
head=b;

    }
        
 return b;       
    }
};


Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
